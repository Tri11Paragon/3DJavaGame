package engineTester;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import models.RawModel;
import models.TexturedModel;

import org.lwjgl.opengl.Display;
import org.lwjgl.util.vector.Vector2f;
import org.lwjgl.util.vector.Vector3f;

import renderEngine.DisplayManager;
import renderEngine.Loader;
import renderEngine.MasterRenderer;
import renderEngine.OBJLoader;
import settings.MasterSettingsLocationList;
import terrains.Terrain;
import terrains.World;
import textures.ModelTexture;
import textures.TerrainTexture;
import textures.TerrainTexturePack;
import entities.EntityLiving;
import entities.Light;
import entities.StaticFirst1st;
import entities.components.BounceComponent;
import guis.GuiRenderer;
import guis.GuiTexture;

public class MainGameLoop {
	
	public static void main(String[] args) {

		DisplayManager.createDisplay();
		
		/**
		 * Load the main objects that are needed for the game to run.
		 */
		MasterSettingsLocationList.loadSettings();
		Loader loader = new Loader();
		MasterRenderer renderer = new MasterRenderer();
		GuiRenderer guiRenderer = new GuiRenderer(loader);
		StaticFirst1st camera = new StaticFirst1st();
		
		/**
		 * Its time to load the terrain textures into memory.
		 * This should be done for each terrain as having
		 * the same terrain repeating is not fun.
		 */
		TerrainTexture backgroundTexture = new TerrainTexture(loader.loadTexture("grassy"));
		TerrainTexture rTexture = new TerrainTexture(loader.loadTexture("dirt"));
		TerrainTexture gTexture = new TerrainTexture(loader.loadTexture("pinkFlowers"));
		TerrainTexture bTexture = new TerrainTexture(loader.loadTexture("path"));
		TerrainTexturePack texturePack = new TerrainTexturePack(backgroundTexture, rTexture, gTexture, bTexture);
		TerrainTexture blendMap = new TerrainTexture(loader.loadTexture("blendMap"));
		
		/**
		 * Time to setup the terrain.
		 * NOTE: blendmaps are NOT repeating.
		 */
		Terrain terrain = new Terrain(0,-1,loader, texturePack, blendMap, "heightmap");
		World world = new World(terrain);
		Light theSun = new Light(new Vector3f(20000,20000,2000),new Vector3f(1,1,1));
		
		/**
		 * Add the GUIs to the GUI list for rendering.
		 * Passing by value might not be the best
		 * idea but, why make a variable you will only use once?
		 * Its better and saves space.
		 */
		List<GuiTexture> guis = new ArrayList<GuiTexture>();
		
		guis.add(new GuiTexture(loader.loadTexture("fern"), new Vector2f(0.5f,0.5f), new Vector2f(0.25f, 0.25f), new Vector2f(0, 0)));
		guis.add(new GuiTexture(loader.loadTexture("fern"), new Vector2f(0.6f,0.6f), new Vector2f(0.25f, 0.25f), new Vector2f(0, 0)));
		
		/**
		 * Models and other's time to be rendered
		 * this includes the trees because they are not
		 * built into the terrain mesh.
		 */
		RawModel treeModel = OBJLoader.loadObjModel("tree", loader); 
		
		TexturedModel staticModel = new TexturedModel(treeModel,new ModelTexture(loader.loadTexture("tree")));
		
		Random random = new Random();
		for(int i=0;i<500;i++){
			float posX = random.nextFloat()*800;
			float posZ = random.nextFloat() * -600;
			world.addEntityLivingToWorld(new EntityLiving(staticModel, new Vector3f(posX,terrain.getHeightOfTerrain(posX, posZ),posZ),0,0,0,3, new Vector3f(random.nextFloat(),random.nextFloat(),random.nextFloat()), false));
		}
		EntityLiving testEntity = new EntityLiving(staticModel, new Vector3f(20, 20, -20),0,0,0,3, new Vector3f(1,1,0.5f), true);
		testEntity.addComponent(new BounceComponent(testEntity, 1.35f, 30));
		world.addEntityLivingToWorld(testEntity);
		
		/**
		 *  Now its time to setup all the threads.
		 *  TODO: add threadpool.
		 */
		
		/*if (MasterSettingsLocationList.useMultithreading) {
			new Thread(new Runnable() { 
				public void run() {
					while (!Display.isCloseRequested()) {
						for (int i = 0; i < world.getEntityLivingList().size(); i++) {
							EntityLiving entity = world.getEntityLivingList().get(i);
							entity.update(terrain);
							System.out.println(entity.getPosition());
						}
					}
				}
			}).start();
		}*/
		
		while(!Display.isCloseRequested()){
			//testEntity.update(terrain);
			camera.move(terrain);
			
			renderer.processTerrain(terrain);
			for(EntityLiving entity:world.getEntityLivingList()){
				renderer.processEntity(entity);
			}
			
			for (int i = 0; i < world.getEntityLivingList().size(); i++) {
				EntityLiving entity = world.getEntityLivingList().get(i);
				entity.update(terrain);
			}
			renderer.render(theSun, camera);
			guiRenderer.render(guis);
			DisplayManager.updateDisplay();
		}

		guiRenderer.cleanUp();
		renderer.cleanUp();
		loader.cleanUp();
		DisplayManager.closeDisplay();

	}

}
