/*     */ import java.io.DataInputStream;
/*     */ import java.io.DataOutputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.util.List;
/*     */ import java.util.logging.Logger;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class fm
/*     */   implements wt
/*     */ {
/*  24 */   private static final Logger a = Logger.getLogger("Minecraft");
/*     */   
/*     */   private final File b;
/*     */   private final File c;
/*     */   private final File d;
/*  29 */   private final long e = System.currentTimeMillis();
/*     */   
/*     */   public fm(File paramFile, String paramString, boolean paramBoolean) {
/*  32 */     this.b = new File(paramFile, paramString);
/*  33 */     this.b.mkdirs();
/*  34 */     this.c = new File(this.b, "players");
/*  35 */     this.d = new File(this.b, "data");
/*  36 */     this.d.mkdirs();
/*     */     
/*  38 */     if (paramBoolean) {
/*  39 */       this.c.mkdirs();
/*     */     }
/*     */     
/*  42 */     d();
/*     */   }
/*     */   
/*     */   private void d() {
/*     */     try {
/*  47 */       File localFile = new File(this.b, "session.lock");
/*  48 */       DataOutputStream localDataOutputStream = new DataOutputStream(new FileOutputStream(localFile));
/*     */       try {
/*  50 */         localDataOutputStream.writeLong(this.e);
/*     */       } finally {
/*  52 */         localDataOutputStream.close();
/*     */       }
/*     */     } catch (IOException localIOException) {
/*  55 */       localIOException.printStackTrace();
/*  56 */       throw new RuntimeException("Failed to check session lock, aborting");
/*     */     }
/*     */   }
/*     */   
/*     */   protected File a() {
/*  61 */     return this.b;
/*     */   }
/*     */   
/*     */   public void b() {
/*     */     try {
/*  66 */       File localFile = new File(this.b, "session.lock");
/*  67 */       DataInputStream localDataInputStream = new DataInputStream(new FileInputStream(localFile));
/*     */       try {
/*  69 */         if (localDataInputStream.readLong() != this.e) {
/*  70 */           throw new us("The save is being accessed from another location, aborting");
/*     */         }
/*     */       } finally {
/*  73 */         localDataInputStream.close();
/*     */       }
/*     */     } catch (IOException localIOException) {
/*  76 */       throw new us("Failed to check session lock, aborting");
/*     */     }
/*     */   }
/*     */   
/*     */   public bf a(xa paramxa)
/*     */   {
/*  82 */     if ((paramxa instanceof wd)) {
/*  83 */       File localFile = new File(this.b, "DIM-1");
/*  84 */       localFile.mkdirs();
/*  85 */       return new to(localFile, true);
/*     */     }
/*     */     
/*  88 */     return new to(this.b, true);
/*     */   }
/*     */   
/*     */   public ei c() {
/*  92 */     File localFile = new File(this.b, "level.dat");
/*  93 */     nu localnu3; if (localFile.exists()) {
/*     */       try {
/*  95 */         nu localnu1 = as.a(new FileInputStream(localFile));
/*  96 */         localnu3 = localnu1.k("Data");
/*     */         
/*  98 */         return new ei(localnu3);
/*     */       }
/*     */       catch (Exception localException1) {
/* 101 */         localException1.printStackTrace();
/*     */       }
/*     */     }
/* 104 */     localFile = new File(this.b, "level.dat_old");
/* 105 */     if (localFile.exists()) {
/*     */       try {
/* 107 */         nu localnu2 = as.a(new FileInputStream(localFile));
/* 108 */         localnu3 = localnu2.k("Data");
/*     */         
/* 110 */         return new ei(localnu3);
/*     */       }
/*     */       catch (Exception localException2) {
/* 113 */         localException2.printStackTrace();
/*     */       }
/*     */     }
/* 116 */     return null;
/*     */   }
/*     */   
/*     */   public void a(ei paramei, List paramList)
/*     */   {
/* 121 */     nu localnu1 = paramei.a(paramList);
/*     */     
/* 123 */     nu localnu2 = new nu();
/* 124 */     localnu2.a("Data", localnu1);
/*     */     try
/*     */     {
/* 127 */       File localFile1 = new File(this.b, "level.dat_new");
/* 128 */       File localFile2 = new File(this.b, "level.dat_old");
/* 129 */       File localFile3 = new File(this.b, "level.dat");
/*     */       
/* 131 */       as.a(localnu2, new FileOutputStream(localFile1));
/*     */       
/* 133 */       if (localFile2.exists()) localFile2.delete();
/* 134 */       localFile3.renameTo(localFile2);
/* 135 */       if (localFile3.exists()) localFile3.delete();
/* 136 */       localFile1.renameTo(localFile3);
/* 137 */       if (localFile1.exists()) localFile1.delete();
/*     */     } catch (Exception localException) {
/* 139 */       localException.printStackTrace();
/*     */     }
/*     */   }
/*     */   
/*     */   public void a(ei paramei) {
/* 144 */     nu localnu1 = paramei.a();
/*     */     
/* 146 */     nu localnu2 = new nu();
/* 147 */     localnu2.a("Data", localnu1);
/*     */     try
/*     */     {
/* 150 */       File localFile1 = new File(this.b, "level.dat_new");
/* 151 */       File localFile2 = new File(this.b, "level.dat_old");
/* 152 */       File localFile3 = new File(this.b, "level.dat");
/*     */       
/* 154 */       as.a(localnu2, new FileOutputStream(localFile1));
/*     */       
/* 156 */       if (localFile2.exists()) localFile2.delete();
/* 157 */       localFile3.renameTo(localFile2);
/* 158 */       if (localFile3.exists()) localFile3.delete();
/* 159 */       localFile1.renameTo(localFile3);
/* 160 */       if (localFile1.exists()) localFile1.delete();
/*     */     } catch (Exception localException) {
/* 162 */       localException.printStackTrace();
/*     */     }
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public File a(String paramString)
/*     */   {
/* 207 */     return new File(this.d, paramString + ".dat");
/*     */   }
/*     */ }


/* Location:              C:\Users\Brett\AppData\Roaming\.minecraft\versions\b1.7.3_HACKS\b1.7.3_HACKS.jar!\fm.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       0.7.1
 */