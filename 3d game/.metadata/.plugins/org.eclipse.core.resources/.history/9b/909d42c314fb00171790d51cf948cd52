#version 400 core

in vec2 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector[3];
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D modelTexture;
uniform vec3 lightColour[3];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 color_info;

void main(void){
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 unitNormal = normalize(surfaceNormal);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for(int i=0;i<3;i++){
		vec3 unitLightVector = normalize(toLightVector[i]);
		float nDotl = dot(unitNormal,unitLightVector);
		float brightness = max(nDotl,0.0);
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
		float specularFactor = dot(reflectedLightDirection , unitVectorToCamera);
		specularFactor = max(specularFactor,0.0);
		float dampedFactor = pow(specularFactor,shineDamper);
		totalDiffuse = totalDiffuse + brightness * lightColour[i];
		totalSpecular = totalSpecular + dampedFactor * reflectivity * lightColour[i];
	}
	totalDiffuse = max(totalDiffuse, 0.2)
	
	if (color_info == vec3(0,0,0)){
		out_Color =  vec4(totalDiffuse,1.0) * ((texture(modelTexture,pass_textureCoordinates) + vec4(totalSpecular,1.0)));
	} else {
		out_Color =  vec4(totalDiffuse,1.0) * (vec4(color_info, 1.0) - (texture(modelTexture,pass_textureCoordinates) + vec4(totalSpecular,1.0)));
	}

}